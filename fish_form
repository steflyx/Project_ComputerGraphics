function worldMatrixParams(pieceIndex){
    var tmp_matrice = new Array(); 
    switch (pieceIndex){
          //big triangle 1
    case 0:
        tmp_matrice= [ 0.0, square_size/Math.sqrt(2)-((1/3)*square_size*Math.cos(utils.degToRad(45))),-(square_size/4-((1/3)*square_size*Math.cos(utils.degToRad(45)))), 0.0,135, 0.0, 1.0];
        break;
    	
	//big triangle 2
     case 1:
        tmp_matrice= [0.0,-(square_size/Math.sqrt(2)-((1/3)*square_size*Math.cos(utils.degToRad(45)))),-(square_size/4-((1/3)*square_size*Math.cos(utils.degToRad(45)))), 0.0,45.0, 0.0, 1.0];
        break;
	
	//small triangle 1
     case 2:
        tmp_matrice= [0.0, Math.sin(utils.degToRad(45.0))*square_size/6,(square_size/4+ square_size/(2*Math.sqrt(2)))- (Math.sin(utils.degToRad(45.0))*square_size/6), 0.0, -45.0, 0.0, 1.0];
        break;
	
	//medium triangle 1
     case 3:
        tmp_matrice= [0.0,0.0,-( square_size/4+(square_size/(6*Math.sqrt(2)))), 0.0, 90.0, 0.0,1.0];
        break;
    
	//small triangle 2
     case 4:
        tmp_matrice= [0.0, (square_size/(2*Math.sqrt(2)))-Math.sin(utils.degToRad(45.0))*square_size/6,  (square_size/4+ square_size/(2*Math.sqrt(2)))+Math.sin(utils.degToRad(45.0))*square_size/6, 0.0, 135, 0.0, 1.0];
        break;
								
	//Square
     case 5:
        tmp_matrice= [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0];
        break;
				
	//parallelepiped
      case 6:
        tmp_matrice= [0.0,-square_size/Math.sqrt(32),square_size/4+(square_size/(2*Math.sqrt(2))), 0.0, 45.0, 180.0, 1.0];
        break;   
    }   
    return tmp_matrice;
}
